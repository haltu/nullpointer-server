This document describes the most important models, their fields and their
interdependencies.

The concept of ownership is used in the descriptions below. The 'owner' of a
model instance is the only user who has access to the model instance. For
example, if a User owns a playlist, the JSON API only provides access to the
playlist if the request is authenticated as coming from the owning User.

----
User
----
The User model is part of django framework. It is used because of its
easy integration with the Django Rest Framework's authentication mechanism.

See https://docs.djangoproject.com/en/1.9/ref/contrib/auth/#user

Fields:
    username: required
    password: required
    first_name: optional. Not used by the system for anything important
    last_name: optional. Not used by the system for anything important
    email: optional. Not used by the system for anything important
    id: generated by the system

------
Device
------
An instance of the Device model represents a Raspberry Pi belonging to the
Hisra system. 

A device is owned by a single user. The device has two IDs. One is a simple ID
representing its primary key. This is used to reference the device for example
in database transactions. The second ID, named 'unique_device_id', is a
special ID which is only known by the server and the device. It is not present
when serializing the model instance and is not displayed to the user at any
point. This ID is appended to the HTTP request headers sent by the device to
the server so that the server can identify the device's owner and permissions.

A playlist can be set for the device by setting the playlist_id field to
the desired playlist id. The device will inform the server when its playlist
changes and the currently used playlist is stored in the confirmed_playlist_id
field.

Fields:
    id: generated by the system
    unique_device_id: required. Hidden from users and entered by an admin.
    name: Name of the device given by the user
    owner_id: ID of the User who owns the device
    playlist_id: ID of the playlist which the user wants the device to used
    confirmed_playlist_id: ID of the playlist which the device is using
    confirmed_playlist_update_time: the time when the device began using the
        confirmed playlist.

------------
DeviceStatus
------------
An instance of DeviceStatus represents a status update sent to the server by
a Device. This can be e.g. information on failures to download a playlist.

Fields:
    id: generated by the database
    type: required. Integer, 0 for failure, 1 for success
    category: required. String, max 20 characters. The general kind of error,
        e.g. 'Connection' if it is a connection problem. There are no defined
        categories, this can be any string of 20 characters or less.
    time: required. timestamp of when the status message was generated on the
        device.
    description: required. A string of max. 128 characters. This is a human-
        readable description of what happened, e.g. 'Failed to fetch playlist,
        server returned status: 502'.
    device_id: requred. ID of the device which the status update belongs to.

Notes:
    There is quite a lot of redundancy here. It would be possible to make
    the database more compact by creating tables for 'category' and possibly
    even 'description'.

--------
Playlist
--------
An instance of Playlist represents an ordered sequence of Media instances
which are displayed by the Device, with a display time for each media.

Fields:
    id: generated by the database
    name: Name of the playlist given by the User
    description: A description of the playlist given by the User.
    owner_id: required. The User who owns the playlist.
    updated: timestamp when the playlist was updated. Used by the Device to
        determine whether the playlist needs to be re-downloaded.
    media_schedule_json: required. see extended description below,

The 'media_schedule_json' field is a text field which is validated by the
server as syntactically correct JSON. This field contains a JSON list of Media
instances and their display times. The list is in the order in which the media
is displayed by the Device.

The decision to denormalize the playlist media schedule into this form was
taken because of the difficulty of creating Django-native database models for
storing and modifying ordered lists of media. The JSON storage format makes
editing the playlist media order easier, but as a trade-off the implementation
is more prone to problems such as the playlist media getting out of synch with
Media instances in the database. For example, the code for removing a Media
instance has to iterate through all of the Playlists of the Media owner,
removing it from the Playlist's media_schedule_json.

-----
Media
-----
This represents a single piece of media which can be displayed by the Device.

Fields:
    id: generated by the database
    media_file: <TODO>
    md5: a MD5 hash of a media file used by the Device for integrity checks.
        This is only included with images and videos which have been uploaded
        to the server. It is not provided for externally hosted files or web
        pages.
    url: required. The URL where the media can be downloaded from.
    media_type: required. The type of media. This can be 'V' for videos (mp4),
        'I' for images or 'W' for web pages.
    name: a user-provided name for the media.
    description: a user-provided description for the media.
    owner_id: the User id of the owner.
