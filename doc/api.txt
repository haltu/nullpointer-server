A prototype of the HISRA web api.
First see the HISRA data model UML
-----------------------------
Media:
-----------------------------
-----------------------------
GET /api/user/:username/media
-----------------------------
Description: 
  Returns all media belonging to the user
Authorization:
  Not implemented
Status: 
  200 OK
Errors: 
  404 NOT FOUND if user does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON: 
  N/A
Returns JSON:
  [
    {
      'description': u'A big blue sad face', 
      'url': u'http://cdn3.volusion.com/sbcpn.tjpek/v/vspfiles/photos/FACE001C-2.jpg', 
      'mediatype': 'P', 
      'md5_checksum': u'ac59c6b42a025514e5de073d697b2afb', 
      'owner': 12,
      'id': 13,
      'name': u'sad face'
    },
    ...
  ]

---------------------------------
GET /api/user/:username/media/:id
---------------------------------
Description: 
  Returns the media with the given id
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if the user or media does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON: 
  N/A
Returns JSON:
  200 OK
  {
    'description': u'A big blue sad face', 
    'url': u'http://cdn3.volusion.com/sbcpn.tjpek/v/vspfiles/photos/FACE001C-2.jpg', 
    'mediatype': 'P', 
    'md5_checksum': u'ac59c6b42a025514e5de073d697b2afb', 
    'owner': 12,
    'id': 13,
    'name': u'sad face'
  }

------------------------------
POST /api/user/:username/media
------------------------------
Description:
  Creates a new media for the user
Authorization:
  Not implemented
Status: 
  201 CREATED
Errors:
  400 BAD REQUEST if the request JSON is not valid
  404 NOT FOUND if the user does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    'url': 'http://cdn3.volusion.com/sbcpn.tjpek/v/vspfiles/photos/FACE001C-2.jpg',
    'mediatype': 'P',
    'name': 'sad face',
    'description': 'A big blue sad face',
    'md5_checksum': 'ac59c6b42a025514e5de073d697b2afb'  # fake
  }
Returns JSON:
  {
    'description': u'A big blue sad face', 
    'url': u'http://cdn3.volusion.com/sbcpn.tjpek/v/vspfiles/photos/FACE001C-2.jpg', 
    'mediatype': 'P', 
    'md5_checksum': u'ac59c6b42a025514e5de073d697b2afb', 
    'owner': 12,
    'id': 13,
    'name': u'sad face'
  }

------------------------------------
DELETE /api/user/:username/media/:id
------------------------------------
Description:
  Deletes an existing media
Authorization:
  Not implemented
Status:
  200 OK
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Errors:
  404 NOT FOUND if the user or media does not exist
Accepts JSON:
  N/A
Returns JSON:
  N/A

--------------------------------
User playlists:
--------------------------------
--------------------------------
GET /api/user/:username/playlist
--------------------------------
Description:
  Returns all the playlists of the user
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if the user does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      'owner': 21, 
      'description': u'All the best stuff', 
      'media_schedule_json': u'{"fake_playlist_json": "true"}', 
      'id': 17, 
      'name': u'Cool playlist'
    },
    ...
  ]

------------------------------------
GET /api/user/:username/playlist/:id
------------------------------------
Description:
  Returns the playlist with the given id
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if the user or playlist does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    'owner': 21, 
    'description': u'All the best stuff', 
    'media_schedule_json': u'{"fake_playlist_json": "true"}', 
    'id': 17, 
    'name': u'Cool playlist'
  }
  
---------------------------------
POST /api/user/:username/playlist
---------------------------------
Description:
  Creates a new playlist for the user
Authorization:
  Not implemented
Status:
  201 CREATED
Errors:
  404 NOT FOUND if the user does not exist
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    'name': 'Cool playlist',
    'description': 'All the best stuff',
    'media_schedule_json': '{"fake_playlist" : "true"}'
  }
Returns JSON:
  {
    'owner': 15, 
    'description': u'All the best stuff', 
    'media_schedule_json': u'{"fake_playlist" : "true"}', 
    'id': 6, 
    'name': u'Cool playlist'
  }

------------------------------------
PUT /api/user/:username/playlist/:id
------------------------------------
Description:
  Updates an existing playlist for the user
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if username or playlist do not exist
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON:
  # Any field can be missing
  {
    'name': new_name,
    'description': new_description,
    'media_schedule_json': new_json
  }
Returns JSON:
  # All the fields provided above are updated in the response
  {
    'owner': 22,
    'description': u'New description',
    'media_schedule_json': u'{"new_playlist":"true"}',
    'id': 18,
    'name': u'New name'
  }
------------------------------
Devices:
------------------------------
------------------------------
GET /api/user/:username/device
------------------------------
Description:
  Returns all devices owned by the user
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if user does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      'owner': 4, 
      'playlist': 4, 
      'unique_device_id': u'device_1'
    },
    ...
  ]

----------------------------------
GET /api/user/:username/device/:id
----------------------------------
Description:
  Returns details of a device
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if user or device does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    'owner': 4, 
    'playlist': 4, 
    'unique_device_id': u'device_1'
  }

-------------------------------
POST /api/user/:username/device
-------------------------------
Description:
  Adds a device for the user
Authorization:
  Not implemented
Status:
  201 CREATED
Errors:
  404 NOT FOUND if user does not exist
  400 BAD REQUEST if JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    'unique_device_id': 'device_1',
    'playlist': '1' # Playlist ID
  }
Returns JSON:
  {
    'owner': 1, 
    'playlist': 1, 
    'unique_device_id': u'device_1'
  }

----------------------------------
PUT /api/user/:username/device/:id
----------------------------------
Description:
  Updates the device playlist
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if user or device does not exist
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    'playlist': '2' # Playlist ID
  }
Returns JSON:
  {
    'owner': 1, 
    'playlist': 2, 
    'unique_device_id': u'device_1'
  }

-----------------------
Users:
-----------------------
-----------------------
GET /api/user/:username
-----------------------
Description:
  Returns some details for the user
Authorization:
  Not implemented
Status:
  200 OK
Errors:
  404 NOT FOUND if the user does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    'username': u'user0', 
    'id': 56
  }

--------------
POST /api/user
--------------
Description:
  Creates an new user
Authorization:
  Not implemented
Status:
  201 CREATED
Errors:
  400 BAD REQUEST
URL parameters:
  N/A
Accepts JSON:
  {
    'username': 'test_user', 
    'password': 'password123'
  }
Returns JSON:
  {
    'username': u'test_user', 
    'id': 56
  }

Optional (nice to have, not a requirement):
------------------------------------
GET /api/device/:deviceid/statistics
