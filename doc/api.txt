This is a description of the Hisra JSON API.
It shows available URLs, parameters, status codes,
errors and example JSON.

--------------------
List of URL patterns
--------------------
GET /api/user/:username/media
POST /api/user/:username/media
GET /api/user/:username/media/:id
DELETE /api/user/:username/media/:id
GET /api/user/:username/playlist
POST /api/user/:username/playlist
GET /api/user/:username/playlist/:id
PUT /api/user/:username/playlist/:id
GET /api/user/:username/device
GET /api/user/:username/device/:id
GET /api/user/:username/device/:id/statistics
GET /api/user/:username
GET /api/device/playlist
POST /api/device/status
GET /media/:owner_id/:filename
GET /media/id
POST /api/chunked_upload/
POST /api/chunked_upload_complete/
POST /api/authentication


-----------------------------
Media:
-----------------------------
-----------------------------
GET /api/user/:username/media
-----------------------------
Description:
  Returns all media belonging to the user
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if user does not exist
  401 UNAUTHORIZED if the user is not authenticated
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      "id":1,
      "owner":2,
      "url":"http://bbc.co.uk",
      "media_type":"W",
      "md5":"",
      "name":"BBC",
      "description":"BBC"
    },
    ...
  ]
Notes:
  The "media_type" parameter can be one of the following:
    'I': Image
    'W': Web page
    'V': Video
  The "md5" parameter is the md5 hash of the media file. It is only 
  provided for media uploaded to the server. It is left empty for
  all externally hosted media and web pages.
  
---------------------------------
GET /api/user/:username/media/:id
---------------------------------
Description:
  Returns the media with the given id
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  401 UNAUTHORIZED if the user is not authenticated
  404 NOT FOUND if the user or media does not exist
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON:
  N/A
Returns JSON:
  200 OK
  {
    "id":1,
    "owner":2,
    "url":"http://bbc.co.uk",
    "media_type":"W",
    "md5":"",
    "name":"BBC",
    "description":"BBC"
  } 
Notes:
  The "media_type" parameter can be one of the following:
    'I': Image
    'W': Web page
    'V': Video
  The "md5" parameter is the md5 hash of the media file. It is only 
  provided for media uploaded to the server. It is left empty for
  all externally hosted media and web pages.

------------------------------
POST /api/user/:username/media
------------------------------
Description:
  Creates a new media for the user
Authentication:
  TokenAuthentication
Status:
  201 CREATED
Errors:
  400 BAD REQUEST if the request JSON is not valid
  403 FORBIDDEN if the user does not exist 
  403 FORBIDDEN if the user is not authenticated
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    "name":"cheese",
    "description":"test description",
    "media_type" : "W",
    "url": "http://wikipedia.org/"
  }
Returns JSON:
  {
    "id":3,
    "owner":2,
    "url":"http://wikipedia.org/",
    "media_type":"W",
    "md5":"",
    "name":"wiki",
    "description":"test description"
  } 

------------------------------------
DELETE /api/user/:username/media/:id
------------------------------------
Description:
  Deletes an existing media
Authentication:
  TokenAuthentication
Status:
  204 NO CONTENT
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Errors:
  404 NOT FOUND if the media does not exist
  403 FORBIDDEN if the user does not exist
  401 UNAUTHORIZED if the user is not authenticated
Accepts JSON:
  N/A
Returns JSON:
  N/A

--------------------------------
User playlists:
--------------------------------
--------------------------------
GET /api/user/:username/playlist
--------------------------------
Description:
  Returns all the playlists of the user
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  403 FORBIDDEN if the user does not exist
  401 UNAUTHORIZED if the user is not authenticated
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      "id":1,
      "owner":2,
      "media_url":"http://drajala.ddns.net:8000/media/",
      "updated":"2016-01-19T10:23:45.871654Z",
      "name":"BBC",
      "description":"BBC",
      "media_schedule_json":"[{\"name\": \"BBC\", \"url\": \"http://bbc.co.uk\", \"description\": \"BBC\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
    },
    ...
  ]
Notes:
  The "media_url" parameter is used by the Raspberry Pi client to determine
  whether a piece of media in the media schedule is stored on the backend 
  server. This is necessary to determine whether the media's md5 hash
  should be expected (media stored on the backend server have md5 hashes available).
  The "media_schedule_json" parameter is an escaped JSON string which contains
  the playlist's media in the order in which it should be displayed by
  the Raspberry Pi client.

------------------------------------
GET /api/user/:username/playlist/:id
------------------------------------
Description:
  Returns the playlist with the given id
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if the playlist does not exist
  403 FORBIDDEN if the user does not exist
  401 UNAUTHORIZED if the user is not authenticated
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    "id":1,
    "owner":2,
    "media_url":"http://drajala.ddns.net:8000/media/",
    "updated":"2016-01-19T10:23:45.871654Z",
    "name":"BBC",
    "description":"BBC",
    "media_schedule_json":"[{\"name\": \"BBC\", \"url\": \"http://bbc.co.uk\", \"description\": \"BBC\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  }
Notes:
  The "media_url" parameter is used by the Raspberry Pi client to determine
  whether a piece of media in the media schedule is stored on the backend 
  server. This is necessary to determine whether the media's md5 hash
  should be expected (media stored on the backend server have md5 hashes available).
  The "media_schedule_json" parameter is an escaped JSON string which contains
  the playlist's media in the order in which it should be displayed by
  the Raspberry Pi client.
  The "updated" parameter is a timestamp used by the Raspberry Pi client
  to determine whether the playlist has been updated since the last time
  it was downloaded.

---------------------------------
POST /api/user/:username/playlist
---------------------------------
Description:
  Creates a new playlist for the user
Authentication:
  TokenAuthentication
Status:
  201 CREATED
Errors:
  403 FORBIDDEN if the user does not exist
  401 UNAUTHORIZED if the user is not authorized
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    'name': 'Cool playlist',
    'description': 'All the best stuff',
    "media_schedule_json":"[{\"name\": \"BBC\", \"url\": \"http://bbc.co.uk\", \"description\": \"BBC\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  }
Returns JSON:
  {
    "id":3,
    "owner":2,
    "media_url":"http://drajala.ddns.net:8000/media/",
    "updated":"2016-01-19T10:58:04.129968Z",
    "name":"Cool playlist",
    "description":"All the best stuff",
    "media_schedule_json":"[{\"name\": \"BBC\", \"url\": \"http://bbc.co.uk\", \"description\": \"BBC\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  } 
Notes:
  The "media_url" parameter is used by the Raspberry Pi client to determine
  whether a piece of media in the media schedule is stored on the backend 
  server. This is necessary to determine whether the media's md5 hash
  should be expected (media stored on the backend server have md5 hashes available).
  The "media_schedule_json" parameter is an escaped JSON string which contains
  the playlist's media in the order in which it should be displayed by
  the Raspberry Pi client.
  The "updated" parameter is a timestamp used by the Raspberry Pi client
  to determine whether the playlist has been updated since the last time
  it was downloaded.

------------------------------------
PUT /api/user/:username/playlist/:id
------------------------------------
Description:
  Updates an existing playlist for the user
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if username or playlist do not exist
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([0-9]+)
Accepts JSON:
  # Any field can be missing
  {
    "name":"New name",
    "description": "New Description",
    "media_schedule_json": "[{\"name\": \"Wiki\", \"url\": \"http://wikipedia.org\", \"description\": \"Wiki\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  }
Returns JSON:
  # All the fields provided above are updated in the response
  {
    "id":3,
    "owner":2,
    "media_url":"http://drajala.ddns.net:8000/media/",
    "updated":"2016-01-19T11:06:59.696705Z",
    "name":"New name",
    "description":"New Description",
    "media_schedule_json":"[{\"name\": \"Wiki\", \"url\": \"http://wikipedia.org\", \"description\": \"Wiki\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  }
Notes:
  The "media_url" parameter is used by the Raspberry Pi client to determine
  whether a piece of media in the media schedule is stored on the backend 
  server. This is necessary to determine whether the media's md5 hash
  should be expected (media stored on the backend server have md5 hashes available).
  The "media_schedule_json" parameter is an escaped JSON string which contains
  the playlist's media in the order in which it should be displayed by
  the Raspberry Pi client.
  The "updated" parameter is a timestamp used by the Raspberry Pi client
  to determine whether the playlist has been updated since the last time
  it was downloaded.

----------------------------------------
 DELETE /api/user/:username/playlist/:id
----------------------------------------
Description:
  Deletes a playlist
Authentication:
  TokenAuthentication
Status:
  204 NO CONTENT
Errors:
  404 NOT FOUND if playlist or user does not exist
  401 UNAUTHORIZED if not authenticated as playlist owner
Accepts JSON:
  N/A
Returns JSON:
  N/A

------------------------------
Devices:
------------------------------
------------------------------
GET /api/user/:username/device
------------------------------
Description:
  Returns all devices owned by the user
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if user does not exist
  401 UNAUTHORIZED if the user is not authenticated as the device owner
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      "name":"BestDevice",
      "playlist":1,
      "owner":2,
      "id":1,
      "confirmed_playlist":1,
      "confirmed_playlist_update_time":"2016-01-19T10:23:45.871654Z"
    },
    ...
  ]
Notes:
  The "confirmed_playlist" parameter is the playlist ID which the Raspberry Pi
  client has confirmed as being currently in use.
  The "confirmed_playlist_update_time" is the time when the playlist was
  last confirmed.

----------------------------------
GET /api/user/:username/device/:id
----------------------------------
Description:
  Returns details of a device
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if user or device does not exist
  401 UNAUTHORIZED if the user is not authenticated as the device owner
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    "name":"BestDevice",
    "playlist":1,
    "owner":2,
    "id":1,
    "confirmed_playlist":1,
    "confirmed_playlist_update_time":"2016-01-19T10:23:45.871654Z"
  }
Notes:
  The "confirmed_playlist" parameter is the playlist ID which the Raspberry Pi
  client has confirmed as being currently in use.
  The "confirmed_playlist_update_time" is the time when the playlist was
  last confirmed.

----------------------------------
PUT /api/user/:username/device/:id
----------------------------------
Description:
  Used to set the device playlist and confirmed playlist
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if user or device does not exist
  401 UNAUTHORIZED if not authorized as the device owner
  400 BAD REQUEST if the JSON is faulty
URL parameters:
  username: ([a-zA-Z0-9_]+)
  id: ([a-zA-Z0-9_]+)
Accepts JSON:
  {
    "name":"New name",
    "playlist_id": 1,
    "confirmed_playlist_id": 1
  }
Returns JSON:
  {
    "name":"New name",
    "playlist":1,
    "owner":2,
    "id":1,
    "confirmed_playlist":1,
    "confirmed_playlist_update_time":"2016-01-19T10:23:45.871654Z"
  }
Notes:
  The "confirmed_playlist" parameter is the playlist ID which the Raspberry Pi
  client has confirmed as being currently in use.
  The "confirmed_playlist_update_time" is the time when the playlist was
  last confirmed.

-----------------------
Users:
-----------------------
-----------------------
GET /api/user/:username
-----------------------
Description:
  Returns some details for the user
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if the user does not exist
  401 UNAUTHORIZED if not authorized as the user in question
URL parameters:
  username: ([a-zA-Z0-9_]+)
Accepts JSON:
  N/A
Returns JSON:
  {
    "id":2,
    "username":"testy",
    "first_name":"Donald",
    "last_name":"Duck",
    "email":"dd@whatever.com"
  }


----------------------------------
Devices:
----------------------------------
----------------------------------
GET /api/device/playlist
----------------------------------
Description:
  Used by a device to fetch its own playlist.
Authentication:
  DeviceAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if no playlist is found for the device
  403 FORBIDDEN if no device authentication provided
URL parameters:
  N/A
Accepts JSON:
  N/A
Returns JSON:
  {
    "id":1,
    "owner":2,
    "media_url":"http://drajala.ddns.net:8000/media/",
    "updated":"2016-01-19T10:23:45.871654Z",
    "name":"BBC",
    "description":"BBC",
    "media_schedule_json":"[{\"name\": \"BBC\", \"url\": \"http://bbc.co.uk\", \"description\": \"BBC\", \"time\": 20, \"owner\": 2, \"media_type\": \"W\", \"id\": 1, \"md5\": \"\"}]"
  }
Notes:
  The "media_url" parameter is used by the Raspberry Pi client to determine
  whether a piece of media in the media schedule is stored on the backend 
  server. This is necessary to determine whether the media's md5 hash
  should be expected (media stored on the backend server have md5 hashes available).
  The "media_schedule_json" parameter is an escaped JSON string which contains
  the playlist's media in the order in which it should be displayed by
  the Raspberry Pi client.

----------------
POST /api/device/status
----------------
Description:
  Used by the device to post status information
Authentication:
  DeviceAuthentication
Status:
  201 CREATED
Errors:
  404 NOT FOUND if the device does not exist
  403 FORBIDDEN if no device authentication provided
URL parameters:
  N/A
Accepts JSON:
  {
    "type": 0,
    "category": "Connection",
    "time": "2016-01-19 10:32:59+02",
    "description": "Wrong status from server while fetching playlist: 502"
  }
Returns JSON:
  <TODO>
Notes:
  The "type" parameter can be 0 (error) or 1 (success).
  The "category" parameter can be at most 20 characters
  The "time" parameter uses a '%Y-%m-%d %H:%M:%S' format
  The "description" parameter can be at most 128 characters

---------------------------------------------
GET /api/user/:username/device/:id/statistics
---------------------------------------------
Description:
  Returns a list of statistics from the given device
Authentication:
  TokenAuthentication
Status:
  200 OK
Errors:
  404 NOT FOUND if the device or user does not exist
  403 FORBIDDEN if no device authentication provided
URL parameters:
  N/A
Accepts JSON:
  N/A
Returns JSON:
  [
    {
      "id":34,
      "device_id":1,
      "device_name":"New name",
      "type":0,
      "category":"Connection",
      "description":"Wrong status from server while fetching playlist: 502",
      "time":"2016-01-19T09:45:03Z"
    },
    ...
  ]

------------------------------
GET /media/:owner_id/:filename
------------------------------
Description:
  <TODO>
Authentication:
  <TODO>
Status:
  <TODO>
Errors:
  <TODO>
URL parameters:
  <TODO>
Accepts data:
  <TODO>
Returns data:
  <TODO>
Notes:
  <TODO>
-------------
GET /media/id
-------------
Description:
  <TODO>
Authentication:
  <TODO>
Status:
  <TODO>
Errors:
  <TODO>
URL parameters:
  <TODO>
Accepts data:
  <TODO>
Returns data:
  <TODO>
Notes:
  <TODO>
-------------------------
POST /api/chunked_upload/
-------------------------
Description:
  <TODO>
Authentication:
  <TODO>
Status:
  <TODO>
Errors:
  <TODO>
URL parameters:
  <TODO>
Accepts data:
  <TODO>
Returns data:
  <TODO>
Notes:
  <TODO>
----------------------------------
POST /api/chunked_upload_complete/
----------------------------------
Description:
  <TODO>
Authentication:
  <TODO>
Status:
  <TODO>
Errors:
  <TODO>
URL parameters:
  <TODO>
Accepts data:
  <TODO>
Returns data:
  <TODO>
Notes:
  <TODO>
------------------------
POST /api/authentication
------------------------
Description:
  Used by the web client (browser) to authenticate upon login.
  Based on Token Authentication.
  See http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication
Authentication:
  N/A
Status:
  200 OK
Errors:
  400 BAD REQUEST when username or password are missing or otherwise incorrect JSON is sent
URL parameters:
  N/A
Accepts JSON:
  {
    "username": "testy",
    "password": "pass"
  }
Returns JSON:
  {
    "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b"
  }
